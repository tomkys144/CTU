
%LPF prototype - ideal reconstruction
b0 = [ -0.0059, 0.0129, 0.0013, -0.0274, 0.0086, 0.0510, -0.0338, -0.1001, 0.1243, 0.4688, 0.4688, 0.1243, -0.1001, -0.0338, 0.0510, 0.0086, -0.0274, 0.0013, 0.0129, -0.0059 ];
M=length(b0)-1;

%LPF prototype - matlab fir1
% M=50;
% b0=fir1(M,0.5,'low');

%Number of stages
Nstages = 3;

%Number of frequency bands 
Nbands = 2^Nstages;

%delay generated by filter bank
Delay = (Nbands-1)*M;

%loading signal
%voice signal
sig = loadbin('SA001S01.CS0');
%unit step on position 2500 of 10000 samples
%sig = zeros(10000,1);
%sig(2500:end) = ones(length(sig(2500:end)),1); 
sig_clean = sig;
Psig = mean(sig.^2);
%noise 
k = 0.05;
noi = randn(length(sig),1);
noi = noi.*k;
sig = sig + noi;
Pnoi = mean(noi.^2);
SNRin = 10*log10(Psig/Pnoi);

%analysis bank
%1. stage
noi_mtx = DWT_split(noi,b0);
band_mtx = DWT_split(sig,b0);
%consequent stages
for i = 2:Nstages
    %current number of band_mtx columns
    Ncols = size(band_mtx,2);
    for j = 1:Ncols
        tmp1 = DWT_split(band_mtx(:,j),b0);
        if j == 1
            tmp2 = tmp1;
        else
            tmp2 = [tmp2, tmp1];
        end
    end
    band_mtx = tmp2;
end

for i = 2:Nstages
    %current number of band_mtx columns
    Ncols = size(noi_mtx,2);
    for j = 1:Ncols
        tmp1 = DWT_split(noi_mtx(:,j),b0);
        if j == 1
            tmp2 = tmp1;
        else
            tmp2 = [tmp2, tmp1];
        end
    end
    noi_mtx = tmp2;
end

figure(1)
for i = 1:Nbands
    subplot(Nbands,1,i)
        plot(band_mtx(:,i))
        if i == 1
            title('DWT coefficient c0')
        else
            title(['DWT coefficient d' num2str(i-2)])
        end
end

%noise reduction
%noise variance approx
%n_var = 1/0.6745*var(sig(1:18000));
%threshold
%thr = sqrt(n_var)*sqrt(2*log(length(sig)));
%hard threshold
%thr = sqrt(mean(noi.^2));
% for i = 1:Nbands
%     thr = 3*sqrt(mean(noi_mtx(:,i).^2));
%     for j = 1:length(band_mtx(:,i))
%         if abs(band_mtx(j,i)) < thr
%             band_mtx(j,i) = 0;
%         end
%     end
% end
% for i = 1:Nbands
%     thr = sqrt(mean(noi_mtx(:,i).^2));
%     band_mtx(:,i) = band_mtx(:,i).*(abs(band_mtx(:,i)) >= thr);
% end
%soft threshold
for i = 1:Nbands
    for j = 1:length(band_mtx(:,i))
        thr = 2*sqrt(mean(noi_mtx(:,i).^2));
        if abs(band_mtx(j,i)) < thr
            band_mtx(j,i) = 0;
        else
            band_mtx(j,i) = sign(band_mtx(j,i))*(abs(band_mtx(j,i))-thr);
        end
    end
end
%synthesis bank
band_mtx_synth = band_mtx;
for i = 1:Nstages
    Ncols = size(band_mtx_synth,2);
    for j = 1:2:Ncols
        tmp1 = DWT_merge(band_mtx_synth(:,(j:j+1)),b0);
        if j == 1
            tmp2 = tmp1;
        else
            tmp2 = [tmp2, tmp1];
        end
    end
    band_mtx_synth = tmp2;
end

%signal after synthesis
sig2 = band_mtx_synth(1:length(sig));

% plotting signal bands -> DWT coefficients
figure(3)
for i = 1:Nbands
    subplot(Nbands,1,i)
        plot(band_mtx(:,i))
        if i == 1
            title('DWT coefficient c0')
        else
            title(['DWT coefficient d' num2str(i-2)])
        end
end


e=sig(1:end-Delay)-sig2(Delay+1:end);

Pe=mean(e.^2);
sig_clean_out = sig2(Delay+1:end) - e;
Ps = mean(sig_clean_out.^2);
SNR_e=10*log10(Ps/Pe);
SNR_test = 10*log10(Psig/Pe);

figure(2)
    subplot(311)
        plot(sig)
        title('Input signal')
    subplot(312)
        plot(sig2)
        title('Signal after reconstruction')
        hold on
        plot(sig_clean,'r--')
        hold off
    subplot(313)
        plot(e)
        title(['Error signal, SNR_e = ' num2str(SNR_e) ' dB'])